#!/bin/bash
# Copyright 2015 The Statify Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License. See the AUTHORS file for names of
# contributors.

# Detects the operating system we're compiling on and outputs a file 
# specified by the first argument, which in turn gets read while 
# processing Makefile.

OUTPUT=$1

# Ensure that the correct arguments were passed
if test -z "$OUTPUT"; then
  echo "usage: $0 <output-filename>" >&2
  exit 1
fi

# Delete existing output, if it exists
rm -f $OUTPUT
touch $OUTPUT

# Test for existence of the $CXX variable; if it hasn't been defined,
# default to use g++.
if test -z "$CXX"; then
  CXX=g++
fi

# Define PLATFORM to indicate the build OS
PLATFORM=`uname -s`

# Test to see if the caller specified a lint tool; if not, we'll 
# attempt to default to cpplint.py, but if that isn't present on
# the system, we'll use 'fakelint', a do-nothing stub that lives
# in the scripts/ subdirectory.
if test -z "$LINT_TOOL"; then
  CPPLINT_PY=`which cpplint.py`
  if test -z "$CPPLINT_PY"; then
    LINT_TOOL=./scripts/fakelint.sh
  else
    LINT_TOOL="cpplint.py"
  fi
fi


# Add dependent libraries
LIBRARIES="-lpthread -levent "

# Add platform-specific libraries
if [ "$PLATFORM" = "Linux" ]; then
  LIBRARIES+="-lrt"
fi

# Detect libcurl in various locations, or abort if not found
if [ -d "/usr/include/event2" ]; then
  # Default location: no alternates
  ALT_LIBEVENT_INCLUDE=""
  ALT_LIBEVENT_LIBRARY=""
elif [ -d "/usr/local/include/event2" ]
then
  ALT_LIBEVENT_INCLUDE="-I/usr/local/include"
  ALT_LIBEVENT_LIBRARY="-L/usr/local/lib"
elif [ -d "/home/$USER/usr/include/event2" ]
then
  ALT_LIBEVENT_INCLUDE="-I/home/$USER/usr/include"
  ALT_LIBEVENT_LIBRARY="-L/home/$USER/usr/lib"
else
  echo "Error: libevent not found. Please install libevent on your system." >&2
  exit 1
fi

# Check for curl library
if [ -n "`which curl-config`" ]; then
  LIBRARIES="$LIBRARIES `curl-config --libs`"
else
  echo "Error: curl-config not found. Please install libcurl on your system." >&2
  exit 1
fi

# Source files for the demo program / test harness
DEMO_SOURCES=""
DEMO_SOURCES+='./src/demo.cc '
DEMO_LIBRARIES='-lpthread '

# Source files for the Statify daemon
STATIFYD_SOURCES=""
STATIFYD_SOURCES+='./src/event_decoder.cc '
STATIFYD_SOURCES+='./src/log.cc '
STATIFYD_SOURCES+='./src/program_options.cc '
STATIFYD_SOURCES+='./src/statifyd.cc '

# Source files for the Statify library
STATIFY_SOURCES=""
STATIFY_SOURCES+='./src/buffer.cc '
STATIFY_SOURCES+='./src/client.cc '
STATIFY_SOURCES+='./src/event.cc '
STATIFY_SOURCES+='./src/portable.cc '
STATIFY_SOURCES+='./src/slice.cc '
STATIFY_SOURCES+='./src/statify.cc '
STATIFY_SOURCES+='./src/utility.cc '

# Lint sources
CPPLINT_SOURCES+='./src/*.cc '
CPPLINT_SOURCES+='./include/statify/*.h '

# Emit variables
echo "ALT_LIBEVENT_INCLUDE=$ALT_LIBEVENT_INCLUDE" >> $OUTPUT
echo "ALT_LIBEVENT_LIBRARY=$ALT_LIBEVENT_LIBRARY" >> $OUTPUT
echo "STATIFYD_SOURCES=$STATIFYD_SOURCES" >> $OUTPUT
echo "STATIFY_SOURCES=$STATIFY_SOURCES" >> $OUTPUT
echo "CPPLINT_SOURCES=$CPPLINT_SOURCES" >> $OUTPUT
echo "CXX=$CXX" >> $OUTPUT
echo "DEMO_LIBRARIES=$DEMO_LIBRARIES" >> $OUTPUT
echo "DEMO_SOURCES=$DEMO_SOURCES" >> $OUTPUT
echo "LIBRARIES=$LIBRARIES" >> $OUTPUT
echo "LINT_TOOL=$LINT_TOOL" >> $OUTPUT
